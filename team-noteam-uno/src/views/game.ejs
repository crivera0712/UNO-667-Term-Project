<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UNO Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gradient-to-br from-red-900 via-gray-900 to-black min-h-screen text-white">
    <!-- Game Header -->
    <header class="p-4 flex justify-between items-center bg-black/30">
        <div class="text-2xl font-bold">UNO Game</div>
        <div id="gameInfo" class="text-lg">Game #<span id="gameId"></span></div>
    </header>

    <!-- Game Area -->
    <main class="container mx-auto p-4 flex flex-col h-[calc(100vh-8rem)]">
        <!-- Opponents Area -->
        <div class="grid grid-cols-3 gap-8 mb-8">
            <!-- Left Side Opponents -->
            <div class="flex flex-col items-center gap-4">
                <div id="leftOpponents" class="space-y-4">
                    <!-- Left side opponents will be added here -->
                </div>
            </div>

            <!-- Top Opponents -->
            <div class="flex justify-center">
                <div id="topOpponents" class="flex gap-4">
                    <!-- Top opponents will be added here -->
                </div>
            </div>

            <!-- Right Side Opponents -->
            <div class="flex flex-col items-center gap-4">
                <div id="rightOpponents" class="space-y-4">
                    <!-- Right side opponents will be added here -->
                </div>
            </div>
        </div>
        <!-- Play Area -->
        <div class="flex-1 flex justify-center items-center gap-8">
            <!-- Draw Pile -->
            <div class="relative">
                <div class="draw-pile w-32 h-48 bg-red-600 rounded-xl border-4 border-white/20 shadow-xl flex items-center justify-center transform hover:scale-105 transition-transform cursor-pointer">
                    <span class="text-4xl font-bold text-white">UNO</span>
                </div>
                <div class="absolute -top-2 -right-2">
                    <span id="deckCount" class="bg-white text-black px-3 py-1 rounded-full text-sm font-bold">
                        52
                    </span>
                </div>
            </div>

            <!-- Current Card -->
            <div id="currentCard" class="w-32 h-48 bg-blue-500 rounded-xl border-4 border-white/20 shadow-xl flex items-center justify-center">
                <span class="text-4xl font-bold">7</span>
            </div>
        </div>

        <!-- Player's Hand -->
        <div class="mt-8">
            <div id="playerHand" class="flex justify-center gap-4 overflow-x-auto pb-4">
                <!-- Player cards will be dynamically added here -->
            </div>
        </div>
        </div>
    </main>

    <!-- Game Over Modal -->
    <div id="gameOverModal" class="hidden fixed inset-0 bg-black/90 backdrop-blur-sm flex items-center justify-center z-50">
        <div class="bg-gradient-to-br from-red-900 to-black p-8 rounded-3xl border-2 border-red-500/50 shadow-2xl max-w-2xl w-full mx-4 transform transition-all duration-500 scale-95 opacity-0">
            <h2 class="text-4xl font-bold text-center mb-8 bg-gradient-to-r from-yellow-400 via-red-500 to-yellow-400 text-transparent bg-clip-text">Game Over!</h2>

            <div id="winnerInfo" class="text-center mb-8">
                <div class="text-2xl font-bold text-white mb-2">Winner:</div>
                <div id="winnerName" class="text-3xl font-bold text-red-400 mb-4"></div>
                <div class="inline-block bg-black/50 px-6 py-3 rounded-full">
                    <span class="text-yellow-400">üèÜ Congratulations! üèÜ</span>
                </div>
            </div>

            <div class="grid gap-4 mb-8">
                <h3 class="text-xl font-bold text-center text-gray-300 mb-2">Final Standings</h3>
                <div id="finalStandings" class="space-y-2">
                    <!-- Player standings will be inserted here -->
                </div>
            </div>

            <div class="flex justify-center gap-4">
                <button onclick="location.href='/games'" class="bg-red-600 hover:bg-red-700 text-white px-6 py-3 rounded-xl font-bold transform hover:scale-105 transition-all duration-300">
                    Back to Lobby
                </button>
                <button id="rematchButton" class="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl font-bold transform hover:scale-105 transition-all duration-300">
                    Rematch
                </button>
            </div>
        </div>
    </div>

    <!-- Chat Sidebar -->
    <div class="fixed right-0 top-0 bottom-0 w-80 bg-black/80 border-l border-white/10 flex flex-col z-50">
        <!-- Chat Header -->
        <div class="p-4 border-b border-white/10">
            <h3 class="text-lg font-bold">Game Chat</h3>
        </div>

        <!-- Messages Container -->
        <div id="messages" class="flex-1 overflow-y-auto p-4 space-y-4">
            <!-- Messages will be inserted here -->
        </div>

        <!-- Chat Input -->
        <form id="chatForm" class="p-4 border-t border-white/10">
            <div class="flex gap-2">
                <input
                    type="text"
                    id="messageInput"
                    class="flex-1 bg-black/50 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-red-500 border border-white/20"
                    placeholder="Type your message..."
                    autocomplete="off"
                >
                <button
                    type="submit"
                    class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors duration-200"
                >
                    Send
                </button>
            </div>
        </form>
    </div>

    <!-- Game Controls -->
    <!-- Game Controls -->
    <footer class="fixed bottom-0 left-0 right-0 bg-black/50 backdrop-blur-sm p-4">
        <div class="container mx-auto flex justify-center gap-4">
            <button id="unoButton" class="bg-red-600 hover:bg-red-700 px-6 py-2 rounded-full font-bold transform hover:scale-105 transition-all">
                UNO!
            </button>
            <button id="leaveGame" class="bg-gray-600 hover:bg-gray-700 px-6 py-2 rounded-full font-bold transform hover:scale-105 transition-all">
                Leave Game
            </button>
        </div>
    </footer>

    <script>
        const socket = io();
        // Get gameId from URL path instead of query params
        const pathParts = window.location.pathname.split('/');
        const gameId = pathParts[pathParts.length - 1];

        // Define colorMap at the top level so it's available everywhere
        const colorMap = {
            Red: 'bg-red-500',
            Blue: 'bg-blue-500',
            Green: 'bg-green-500',
            Yellow: 'bg-yellow-500',
            Wild: 'bg-gray-500'
        };

        if (!gameId) {
            console.error('No game ID found in URL');
            window.location.href = '/games';
        } else {
            console.log('Game ID:', gameId);
            // Set game ID in header
            document.getElementById('gameId').textContent = gameId;
        }
        // Card playing functionality
        function onCardClick(cardIndex) {
            // Check if it's the player's turn
            const playerHandContainer = document.getElementById('playerHand');
            if (!playerHandContainer.classList.contains('border-green-500')) {
                console.log('Not your turn');
                return; // Not player's turn
            }

            const hand = document.getElementById('playerHand');
            const cardElement = hand.children[cardIndex];
            if (!cardElement || !cardElement.__card) {
                console.error('Card data not found');
                return;
            }

            const card = cardElement.__card;
            console.log('Attempting to play card:', card);

            if (card.type === 'Wild' || card.type === 'Wild Draw Four') {
                // Show color selection dialog
                const color = prompt('Select a color (Red, Blue, Green, or Yellow):');
                if (!color) return; // User cancelled

                const validColor = color.charAt(0).toUpperCase() + color.slice(1).toLowerCase();
                if (!['Red', 'Blue', 'Green', 'Yellow'].includes(validColor)) {
                    alert('Invalid color selection');
                    return;
                }

                console.log('Playing wild card with color:', validColor);
                socket.emit('play_card', { gameId, cardIndex, selectedColor: validColor }, (response) => {
                    if (!response.success) {
                        console.error('Failed to play card:', response.error);
                        alert(response.error);
                    }
                });
            } else {
                console.log('Playing regular card');
                socket.emit('play_card', { gameId, cardIndex }, (response) => {
                    if (!response.success) {
                        console.error('Failed to play card:', response.error);
                        alert(response.error);
                    }
                });
            }
        }

        // Add draw pile click handler
        document.querySelector('.draw-pile').addEventListener('click', () => {
            socket.emit('draw_card', { gameId }, (response) => {
                if (response.success && response.card) {
                    console.log('Drew card:', response.card);
                } else {
                    console.error('Failed to draw card:', response.error);
                    alert(response.error); // Show error to user
                }
            });
        });
        function createCard(card, index) {
            console.log('Creating card element for:', card);
            if (!card || !card.color || !colorMap[card.color]) {
                console.error('Invalid card data:', card);
                return null;
            }
            const cardElement = document.createElement('div');
            cardElement.className = `w-24 h-36 ${colorMap[card.color]} rounded-xl border-4 border-white/20 shadow-xl flex items-center justify-center transform hover:scale-110 transition-transform cursor-pointer`;
            cardElement.innerHTML = `<span class="text-3xl font-bold text-white">${card.value}</span>`;
            cardElement.addEventListener('click', () => onCardClick(index));
            cardElement.__card = card; // Store the card data on the element
            return cardElement;
        }
        // Initialize player's hand - we'll get this from the server
        const playerHand = document.getElementById('playerHand');
        // Handle leaving game
        document.getElementById('leaveGame').addEventListener('click', () => {
            if (confirm('Are you sure you want to leave the game?')) {
                socket.emit('leave_game', { gameId }, (response) => {
                    if (response && response.success) {
                        window.location.href = '/games';
                    }
                });
            }
        });

        // UNO button handler
        document.getElementById('unoButton').addEventListener('click', () => {
            // TODO: Implement UNO call logic
            console.log('UNO called!');
        });

        // Function to create opponent display
        function createOpponentElement(player, cardCount) {
            const element = document.createElement('div');
            element.className = 'flex items-center gap-4 bg-black/30 p-4 rounded-xl';
            element.innerHTML = `
                <div class="relative">
                    <!-- Opponent's Cards Stack -->
                    <div class="relative w-16 h-24">
                        ${Array(Math.min(3, cardCount)).fill(0).map((_, i) => `
                            <div class="absolute bg-red-600 w-16 h-24 rounded-lg border-2 border-white/20 shadow-lg transform transition-all duration-300"
                                 style="top: ${-i * 2}px; left: ${i * 2}px; z-index: ${i};">
                                <div class="absolute inset-0 flex items-center justify-center">
                                    <span class="text-xl font-bold text-white rotate-45">UNO</span>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                    <!-- Card Count Badge -->
                    <div class="absolute -top-2 -right-2">
                        <span class="bg-white text-black px-2 py-1 rounded-full text-xs font-bold">
                            ${cardCount}
                        </span>
                    </div>
                </div>
                <!-- Player Info -->
                <div class="flex flex-col">
                    <span class="font-bold text-white">${player.username}</span>
                    <span class="text-sm text-gray-400">${player.status || 'Waiting...'}</span>
                </div>
                <!-- Connection Status -->
                <div class="w-3 h-3 rounded-full ${player.connected ? 'bg-green-500' : 'bg-red-500'} animate-pulse"></div>
            `;
            return element;
        }

        // Function to update opponents display
        function updateOpponents(opponents) {
            const leftOpponents = document.getElementById('leftOpponents');
            const topOpponents = document.getElementById('topOpponents');
            const rightOpponents = document.getElementById('rightOpponents');

            // Clear existing opponents
            leftOpponents.innerHTML = '';
            topOpponents.innerHTML = '';
            rightOpponents.innerHTML = '';
            // Distribute opponents around the table
            opponents.forEach((opponent, index) => {
                const opponentElement = createOpponentElement(opponent, opponent.handSize);

                if (opponents.length <= 3) {
                    // All opponents at the top
                    topOpponents.appendChild(opponentElement);
                } else {
                    // Distribute around the table
                    if (index < Math.floor(opponents.length / 3)) {
                        leftOpponents.appendChild(opponentElement);
                    } else if (index < Math.floor(2 * opponents.length / 3)) {
                        topOpponents.appendChild(opponentElement);
                    } else {
                        rightOpponents.appendChild(opponentElement);
                    }
                }
            });
        }

        // Function to update turn indicator
        function updateTurnIndicator(currentPlayerIndex, isMyTurn) {
            const opponents = document.querySelectorAll('.opponent');
            opponents.forEach((opponent, index) => {
                const statusSpan = opponent.querySelector('.status');
                if (statusSpan) {
                    if (index === currentPlayerIndex) {
                        statusSpan.textContent = 'Their turn';
                        statusSpan.classList.add('text-green-400');
                    } else {
                        statusSpan.textContent = 'Waiting...';
                        statusSpan.classList.remove('text-green-400');
                    }
                }
            });

            // Update player's turn indicator
            const playerHandContainer = document.getElementById('playerHand');
            if (isMyTurn) {
                playerHandContainer.classList.add('border-2', 'border-green-500', 'rounded-xl', 'p-4');
            } else {
                playerHandContainer.classList.remove('border-2', 'border-green-500', 'rounded-xl', 'p-4');
            }
        }

        // Socket event listener for opponent updates
        socket.on('game_state_update', (data) => {
            if (data.opponents) {
                updateOpponents(data.opponents);
            }
        });

        // Chat Functionality
        const messagesDiv = document.getElementById('messages');
        const chatForm = document.getElementById('chatForm');
        const messageInput = document.getElementById('messageInput');

        // Function to create a message element
        function createMessageElement(data) {
            const messageElement = document.createElement('div');
            messageElement.className = 'bg-black/30 rounded-lg p-3 break-words';

            // System messages have a different style
            if (data.type === 'system') {
                messageElement.className += ' text-yellow-400 text-sm italic';
                messageElement.textContent = data.message;
            } else {
                messageElement.innerHTML = `
                    <span class="text-red-400 font-semibold">${data.username}:</span>
                    <span class="ml-2 text-white">${data.message}</span>
                `;
            }

            return messageElement;
        }

        // Handle chat form submission
        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const message = messageInput.value.trim();

            if (message) {
                console.log('Sending message:', { gameId, message });
                // Emit the chat message to the game room
                socket.emit('game_chat', {
                    gameId,
                    message: message
                });
                messageInput.value = '';
            }
        });

        // Listen for chat messages
        socket.on('game_chat', (data) => {
            console.log('Received chat message:', data);
            const messageElement = createMessageElement(data);
            messagesDiv.appendChild(messageElement);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
            console.log('Message added to chat display');
        });

        // Listen for game events that should appear in chat
        socket.on('game_event', (data) => {
            const messageElement = createMessageElement({
                type: 'system',
                message: data.message
            });
            messagesDiv.appendChild(messageElement);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        });

        // Join the game room on connection
        socket.emit('join_game_room', { gameId }, (response) => {
            if (!response.success) {
                console.error('Failed to join game room');
            }
        });

        // Listen for game state updates
        socket.on('game_state', (data) => {
            console.log('Received game state:', JSON.stringify(data, null, 2));

            try {
                // Update player's hand
                if (data.hand && Array.isArray(data.hand)) {
                    console.log('Updating hand with:', JSON.stringify(data.hand, null, 2));
                    playerHand.innerHTML = '';
                    data.hand.forEach((card, index) => {
                        console.log('Processing card:', JSON.stringify(card, null, 2));
                        if (!card || typeof card !== 'object') {
                            console.error('Invalid card object:', card);
                            return;
                        }
                        const cardElement = createCard(card, index);
                        if (cardElement) {
                            console.log('Created card element:', cardElement.outerHTML);
                            playerHand.appendChild(cardElement);
                        } else {
                            console.error('Failed to create card element for:', card);
                        }
                    });
                } else {
                    console.warn('No valid hand data received:', data.hand);
                }

                // Update top card
                if (data.topCard) {
                    console.log('Updating top card:', JSON.stringify(data.topCard, null, 2));
                    const currentCard = document.getElementById('currentCard');
                    if (currentCard && data.topCard.color && colorMap[data.topCard.color]) {
                        currentCard.className = `w-32 h-48 ${colorMap[data.topCard.color]} rounded-xl border-4 border-white/20 shadow-xl flex items-center justify-center`;
                        currentCard.innerHTML = `<span class="text-4xl font-bold text-white">${data.topCard.value}</span>`;
                    } else {
                        console.error('Invalid top card data:', data.topCard);
                    }
                }

                // Update opponents
                if (data.opponents && Array.isArray(data.opponents)) {
                    console.log('Updating opponents:', JSON.stringify(data.opponents, null, 2));
                    updateOpponents(data.opponents);
                }

                // Update turn indicator and enable/disable controls based on turn
                if (data.currentPlayerIndex !== undefined) {
                    console.log('Current player index:', data.currentPlayerIndex);
                    console.log('Number of opponents:', data.opponents.length);

                    // Find my position in the game by checking if it's my turn
                    const isMyTurn = data.currentPlayerIndex === data.myPosition;
                    console.log('My position:', data.myPosition);
                    console.log('Is my turn?', isMyTurn);
                    updateTurnIndicator(data.currentPlayerIndex, isMyTurn);

                    // Enable/disable controls based on turn
                    const drawPile = document.querySelector('.draw-pile');
                    const cards = playerHand.querySelectorAll('div');

                    if (isMyTurn) {
                        console.log('Enabling controls - my turn');
                        drawPile.classList.remove('opacity-50', 'cursor-not-allowed');
                        drawPile.classList.add('cursor-pointer');
                        cards.forEach(card => {
                            card.classList.remove('opacity-50', 'cursor-not-allowed');
                            card.classList.add('cursor-pointer');
                        });
                    } else {
                        console.log('Disabling controls - not my turn');
                        drawPile.classList.add('opacity-50', 'cursor-not-allowed');
                        drawPile.classList.remove('cursor-pointer');
                        cards.forEach(card => {
                            card.classList.add('opacity-50', 'cursor-not-allowed');
                            card.classList.remove('cursor-pointer');
                        });
                    }
                }
            } catch (error) {
                console.error('Error processing game state:', error);
            }
        });
        socket.on('card_played', (data) => {
            console.log('Card played:', data);

            // Request a fresh game state after a card is played
            socket.emit('join_game_room', { gameId }, (response) => {
                if (!response.success) {
                    console.error('Failed to refresh game state');
                }
            });
        });

        // Listen for card drawn events
        socket.on('card_drawn', (data) => {
            console.log('Card drawn by:', data.username);

            // Request a fresh game state after a card is drawn
            socket.emit('join_game_room', { gameId }, (response) => {
                if (!response.success) {
                    console.error('Failed to refresh game state');
                }
            });
        });

        // Handle game over event
        socket.on('game_over', (data) => {
            console.log('Game over:', data);
            const modal = document.getElementById('gameOverModal');
            const modalContent = modal.querySelector('div');
            const winnerName = document.getElementById('winnerName');
            const finalStandings = document.getElementById('finalStandings');

            // Set winner name
            winnerName.textContent = data.winner.username;

            // Create final standings
            finalStandings.innerHTML = data.players
                .sort((a, b) => a.handSize - b.handSize)
                .map((player, index) => `
                    <div class="flex items-center justify-between bg-black/30 p-4 rounded-xl">
                        <div class="flex items-center gap-4">
                            <span class="text-2xl font-bold ${index === 0 ? 'text-yellow-400' : 'text-gray-400'}">#${index + 1}</span>
                            <span class="font-bold">${player.username}</span>
                        </div>
                        <span class="text-sm text-gray-400">${player.handSize} cards left</span>
                    </div>
                `)
                .join('');

            // Show modal with animation
            modal.classList.remove('hidden');
            setTimeout(() => {
                modalContent.classList.remove('scale-95', 'opacity-0');
                modalContent.classList.add('scale-100', 'opacity-100');
            }, 100);

            // Handle rematch button
            document.getElementById('rematchButton').addEventListener('click', () => {
                socket.emit('request_rematch', { gameId }, (response) => {
                    if (!response.success) {
                        alert(response.error || 'Failed to request rematch');
                    }
                });
            });
        });

        // Handle rematch started event
        socket.on('rematch_started', (data) => {
            console.log('Rematch started:', data);
            // Redirect all players to the new game's waiting room
            window.location.href = `/games/waiting/${data.newGameId}`;
        });
    </script>
</body>
</html>